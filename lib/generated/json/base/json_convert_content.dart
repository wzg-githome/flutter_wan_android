// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:flutter_wan_android/network/entity/http_error.dart';
import 'package:flutter_wan_android/ui/login/login_entity.dart';
import 'package:flutter_wan_android/ui/main/inner_page/home_page/dh_page/nav_json_entity.dart';
import 'package:flutter_wan_android/ui/main/inner_page/home_page/entity/article_entity.dart';
import 'package:flutter_wan_android/ui/main/inner_page/home_page/entity/banner_entity.dart';
import 'package:flutter_wan_android/ui/main/inner_page/home_page/entity/wx_article_detail_entity.dart';
import 'package:flutter_wan_android/ui/main/inner_page/home_page/entity/wx_article_entity.dart';
import 'package:flutter_wan_android/ui/main/inner_page/knowledge_hierarchy_page/entity/k_h_detail_list_entity.dart';
import 'package:flutter_wan_android/ui/main/inner_page/knowledge_hierarchy_page/entity/k_h_entity.dart';
import 'package:flutter_wan_android/ui/main/inner_page/project_page/entity/project_list_entity.dart';
import 'package:flutter_wan_android/ui/main/inner_page/project_page/entity/project_tree_entity.dart';
import 'package:flutter_wan_android/ui/main/inner_page/user_page/lg_collect_page/lg_collect_entity.dart';
import 'package:flutter_wan_android/ui/register/register_entity.dart';

JsonConvert jsonConvert = JsonConvert();
typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);

class JsonConvert {
	static final Map<String, JsonConvertFunction> convertFuncMap = {
		(HttpError).toString(): HttpError.fromJson,
		(LoginEntity).toString(): LoginEntity.fromJson,
		(NavJsonEntity).toString(): NavJsonEntity.fromJson,
		(NavJsonEntityArticles).toString(): NavJsonEntityArticles.fromJson,
		(ArticleEntity).toString(): ArticleEntity.fromJson,
		(ArticleEntityDatas).toString(): ArticleEntityDatas.fromJson,
		(BannerEntity).toString(): BannerEntity.fromJson,
		(WxArticleDetailEntity).toString(): WxArticleDetailEntity.fromJson,
		(WxArticleDetailEntityDatas).toString(): WxArticleDetailEntityDatas.fromJson,
		(WxArticleDetailEntityDatasTags).toString(): WxArticleDetailEntityDatasTags.fromJson,
		(WxArticleEntity).toString(): WxArticleEntity.fromJson,
		(KHDetailListEntity).toString(): KHDetailListEntity.fromJson,
		(KHDetailListEntityDatas).toString(): KHDetailListEntityDatas.fromJson,
		(KHEntity).toString(): KHEntity.fromJson,
		(KHEntityChildren).toString(): KHEntityChildren.fromJson,
		(ProjectListEntity).toString(): ProjectListEntity.fromJson,
		(ProjectListEntityDatas).toString(): ProjectListEntityDatas.fromJson,
		(ProjectListEntityDatasTags).toString(): ProjectListEntityDatasTags.fromJson,
		(ProjectTreeEntity).toString(): ProjectTreeEntity.fromJson,
		(LgCollectEntity).toString(): LgCollectEntity.fromJson,
		(LgCollectEntityDatas).toString(): LgCollectEntityDatas.fromJson,
		(RegisterEntity).toString(): RegisterEntity.fromJson,
	};

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e,enumConvert: enumConvert)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

List<T>? convertListNotNull<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => _asT<T>(e,enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        return convertFuncMap[type]!(Map<String, dynamic>.from(value)) as T;
      } else {
        throw UnimplementedError('$type unimplemented');
      }
    }
  }

	//list is returned by type
	static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
		if(<HttpError>[] is M){
			return data.map<HttpError>((Map<String, dynamic> e) => HttpError.fromJson(e)).toList() as M;
		}
		if(<LoginEntity>[] is M){
			return data.map<LoginEntity>((Map<String, dynamic> e) => LoginEntity.fromJson(e)).toList() as M;
		}
		if(<NavJsonEntity>[] is M){
			return data.map<NavJsonEntity>((Map<String, dynamic> e) => NavJsonEntity.fromJson(e)).toList() as M;
		}
		if(<NavJsonEntityArticles>[] is M){
			return data.map<NavJsonEntityArticles>((Map<String, dynamic> e) => NavJsonEntityArticles.fromJson(e)).toList() as M;
		}
		if(<ArticleEntity>[] is M){
			return data.map<ArticleEntity>((Map<String, dynamic> e) => ArticleEntity.fromJson(e)).toList() as M;
		}
		if(<ArticleEntityDatas>[] is M){
			return data.map<ArticleEntityDatas>((Map<String, dynamic> e) => ArticleEntityDatas.fromJson(e)).toList() as M;
		}
		if(<BannerEntity>[] is M){
			return data.map<BannerEntity>((Map<String, dynamic> e) => BannerEntity.fromJson(e)).toList() as M;
		}
		if(<WxArticleDetailEntity>[] is M){
			return data.map<WxArticleDetailEntity>((Map<String, dynamic> e) => WxArticleDetailEntity.fromJson(e)).toList() as M;
		}
		if(<WxArticleDetailEntityDatas>[] is M){
			return data.map<WxArticleDetailEntityDatas>((Map<String, dynamic> e) => WxArticleDetailEntityDatas.fromJson(e)).toList() as M;
		}
		if(<WxArticleDetailEntityDatasTags>[] is M){
			return data.map<WxArticleDetailEntityDatasTags>((Map<String, dynamic> e) => WxArticleDetailEntityDatasTags.fromJson(e)).toList() as M;
		}
		if(<WxArticleEntity>[] is M){
			return data.map<WxArticleEntity>((Map<String, dynamic> e) => WxArticleEntity.fromJson(e)).toList() as M;
		}
		if(<KHDetailListEntity>[] is M){
			return data.map<KHDetailListEntity>((Map<String, dynamic> e) => KHDetailListEntity.fromJson(e)).toList() as M;
		}
		if(<KHDetailListEntityDatas>[] is M){
			return data.map<KHDetailListEntityDatas>((Map<String, dynamic> e) => KHDetailListEntityDatas.fromJson(e)).toList() as M;
		}
		if(<KHEntity>[] is M){
			return data.map<KHEntity>((Map<String, dynamic> e) => KHEntity.fromJson(e)).toList() as M;
		}
		if(<KHEntityChildren>[] is M){
			return data.map<KHEntityChildren>((Map<String, dynamic> e) => KHEntityChildren.fromJson(e)).toList() as M;
		}
		if(<ProjectListEntity>[] is M){
			return data.map<ProjectListEntity>((Map<String, dynamic> e) => ProjectListEntity.fromJson(e)).toList() as M;
		}
		if(<ProjectListEntityDatas>[] is M){
			return data.map<ProjectListEntityDatas>((Map<String, dynamic> e) => ProjectListEntityDatas.fromJson(e)).toList() as M;
		}
		if(<ProjectListEntityDatasTags>[] is M){
			return data.map<ProjectListEntityDatasTags>((Map<String, dynamic> e) => ProjectListEntityDatasTags.fromJson(e)).toList() as M;
		}
		if(<ProjectTreeEntity>[] is M){
			return data.map<ProjectTreeEntity>((Map<String, dynamic> e) => ProjectTreeEntity.fromJson(e)).toList() as M;
		}
		if(<LgCollectEntity>[] is M){
			return data.map<LgCollectEntity>((Map<String, dynamic> e) => LgCollectEntity.fromJson(e)).toList() as M;
		}
		if(<LgCollectEntityDatas>[] is M){
			return data.map<LgCollectEntityDatas>((Map<String, dynamic> e) => LgCollectEntityDatas.fromJson(e)).toList() as M;
		}
		if(<RegisterEntity>[] is M){
			return data.map<RegisterEntity>((Map<String, dynamic> e) => RegisterEntity.fromJson(e)).toList() as M;
		}

		debugPrint("${M.toString()} not found");
	
		return null;
}

	static M? fromJsonAsT<M>(dynamic json) {
		if (json is List) {
			return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
		} else {
			return jsonConvert.convert<M>(json);
		}
	}
}